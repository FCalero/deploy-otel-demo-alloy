apiVersion: v1
data:
  config.alloy: "otelcol.receiver.otlp \"default\" {\r\n  \/\/ https:\/\/grafana.com\/docs\/alloy\/latest\/reference\/components\/otelcol.receiver.otlp\/\r\n\r\n     \/\/ configures the default grpc endpoint \"0.0.0.0:4317\"\r\n  grpc { }\r\n  \/\/ configures\r\n    the default http\/protobuf endpoint \"0.0.0.0:4318\"\r\n  http { }\r\n  output {\r\n\tmetrics\r\n    = [otelcol.processor.k8sattributes.default.input]\r\n\tlogs    = [otelcol.processor.k8sattributes.default.input]\r\n\ttraces\r\n     = [otelcol.processor.k8sattributes.default.input]\r\n  }\r\n}\r\n\r\n\/\/ added this after\r\n    discussion with Pete\r\n\/\/ supposed to add several labels, including the k8s namespace\r\n    name, which I needed for KG\r\notelcol.processor.k8sattributes \"default\" {\r\n  output\r\n    {\r\n\tmetrics = [otelcol.processor.resourcedetection.default.input]\r\n\tlogs    =\r\n    [otelcol.processor.resourcedetection.default.input]\r\n\ttraces  = [otelcol.processor.resourcedetection.default.input]\r\n\r\n     }\r\n}\r\n\r\n\r\notelcol.processor.resourcedetection \"default\" {\r\n  \/\/ https:\/\/grafana.com\/docs\/alloy\/latest\/reference\/components\/otelcol.processor.resourcedetection\/\r\n\r\n     detectors = [\"env\", \"system\"] \/\/ add \"gcp\", \"ec2\", \"ecs\", \"elastic_beanstalk\",\r\n    \"eks\", \"lambda\", \"azure\", \"aks\", \"consul\", \"heroku\"  if you want to\r\n    use cloud resource detection\r\n\r\n  system {\r\n    hostname_sources = [\"os\"]\r\n\r\n     }\r\n\r\n  output {\r\n    metrics = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]\r\n\r\n       logs    = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]\r\n\r\n       traces  = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]\r\n\r\n     }\r\n}\r\n\r\notelcol.processor.transform \"drop_unneeded_resource_attributes\" {\r\n\r\n     \/\/ https:\/\/grafana.com\/docs\/alloy\/latest\/reference\/components\/otelcol.processor.transform\/\r\n\r\n     error_mode = \"ignore\"\r\n\r\n  trace_statements {\r\n    context    = \"resource\"\r\n\r\n       statements = [\r\n      \"delete_key(attributes, \\\"k8s.pod.start_time\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"os.description\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"os.type\\\")\",\r\n      \"delete_key(attributes, \\\"process.command_args\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"process.executable.path\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"process.pid\\\")\",\r\n      \"delete_key(attributes, \\\"process.runtime.description\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"process.runtime.name\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"process.runtime.version\\\")\",\r\n    ]\r\n  }\r\n\r\n  metric_statements {\r\n    context\r\n       = \"resource\"\r\n    statements = [\r\n      \"delete_key(attributes, \\\"k8s.pod.start_time\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"os.description\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"os.type\\\")\",\r\n      \"delete_key(attributes, \\\"process.command_args\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"process.executable.path\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"process.pid\\\")\",\r\n      \"delete_key(attributes, \\\"process.runtime.description\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"process.runtime.name\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"process.runtime.version\\\")\",\r\n    ]\r\n  }\r\n\r\n  log_statements {\r\n    context\r\n       = \"resource\"\r\n    statements = [\r\n      \"delete_key(attributes, \\\"k8s.pod.start_time\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"os.description\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"os.type\\\")\",\r\n      \"delete_key(attributes, \\\"process.command_args\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"process.executable.path\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"process.pid\\\")\",\r\n      \"delete_key(attributes, \\\"process.runtime.description\\\")\",\r\n\r\n         \"delete_key(attributes, \\\"process.runtime.name\\\")\",\r\n      \"delete_key(attributes,\r\n    \\\"process.runtime.version\\\")\",\r\n    ]\r\n  }\r\n\r\n  output {\r\n    metrics = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]\r\n\r\n       logs    = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]\r\n\r\n       traces  = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]\r\n\r\n     }\r\n\r\n}\r\n\r\n\/\/ (This component is not part of the starter AppOlly production config\r\n    in Grafana's docs.)\r\n\/\/ This adds a custom set of OTTL transformations that normalizes\r\n    span names,\r\n\/\/ to remove high-cardinality IDs (like cart ID, recommendation ID)\r\notelcol.processor.transform\r\n    \"reduce_otel_demo_cardinality\" {\r\n\r\n  error_mode = \"ignore\"\r\n\r\n  trace_statements\r\n    {\r\n    context    = \"span\"\r\n    statements = [\r\n      \"replace_match(name,\r\n    \\\"GET \/api\/cart*\\\", \\\"GET \/api\/cart\\\")\",\r\n      \"replace_match(name,\r\n    \\\"GET \/api\/recommendations*\\\", \\\"GET \/api\/recommendations\\\")\",\r\n      \"replace_match(name,\r\n    \\\"GET \/api\/products*\\\", \\\"GET \/api\/products\\\")\",\r\n    ]\r\n  }\r\n\r\n  output\r\n    {\r\n    metrics = [otelcol.processor.transform.add_labels_for_KG.input]\r\n    logs\r\n       = [otelcol.processor.transform.add_labels_for_KG.input]\r\n    traces  = [otelcol.processor.transform.add_labels_for_KG.input]\r\n\r\n     }\r\n}\r\n\r\n\r\n\/\/ this is based on conversations about using KG with App O11y\r\notelcol.processor.transform\r\n    \"add_labels_for_KG\" {\r\n  error_mode = \"ignore\"\r\n  trace_statements {\r\n    context\r\n       = \"resource\"\r\n    statements = [\r\n      \"set(attributes[\\\"k8s.cluster.name\\\"], \\\"zzz-stadler-tf-take-home\\\")\",\r\n\r\n         \"set(attributes[\\\"cloud.provider\\\"], \\\"gcp\\\")\",\r\n      \"set(attributes[\\\"cloud.account.id\\\"],\r\n    \\\"solutions-engineering-248511\\\")\",\r\n      \"set(attributes[\\\"cloud.availability.zone\\\"],\r\n    \\\"us-central1-a\\\")\",\r\n      \"set(attributes[\\\"k8s.pod.name\\\"], \\\"12345\\\")\",\r\n\r\n       ]\r\n  }\r\n  output {\r\n    metrics = [otelcol.processor.transform.add_resource_attributes_as_metric_attributes.input]\r\n\r\n       logs    = [otelcol.processor.batch.default.input]\r\n    traces  = [\r\n      otelcol.processor.batch.default.input,\r\n\r\n         otelcol.connector.host_info.default.input,\r\n    ]\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\notelcol.connector.host_info\r\n    \"default\" {\r\n  \/\/ https:\/\/grafana.com\/docs\/alloy\/latest\/reference\/components\/otelcol.connector.host_info\/\r\n\r\n     host_identifiers = [\"host.name\"]\r\n\r\n  output {\r\n    metrics = [otelcol.processor.batch.default.input]\r\n\r\n     }\r\n}\r\n\r\notelcol.processor.transform \"add_resource_attributes_as_metric_attributes\"\r\n    {\r\n  \/\/ https:\/\/grafana.com\/docs\/alloy\/latest\/reference\/components\/otelcol.processor.transform\/\r\n\r\n     error_mode = \"ignore\"\r\n\r\n  metric_statements {\r\n    context    = \"datapoint\"\r\n\r\n       statements = [\r\n      \"set(attributes[\\\"deployment.environment\\\"], resource.attributes[\\\"deployment.environment\\\"])\",\r\n\r\n         \"set(attributes[\\\"service.version\\\"], resource.attributes[\\\"service.version\\\"])\",\r\n\r\n       ]\r\n  }\r\n\r\n  output {\r\n    metrics = [otelcol.processor.batch.default.input]\r\n\r\n     }\r\n}\r\n\r\notelcol.processor.batch \"default\" {\r\n  \/\/ https:\/\/grafana.com\/docs\/alloy\/latest\/reference\/components\/otelcol.processor.batch\/\r\n\r\n     output {\r\n    metrics = [otelcol.exporter.otlphttp.grafana_cloud.input]\r\n    logs\r\n       = [otelcol.exporter.otlphttp.grafana_cloud.input]\r\n    traces  = [otelcol.exporter.otlphttp.grafana_cloud.input]\r\n\r\n     }\r\n}\r\n\r\n\/\/ (The next 2 components are not part of the starter AppOlly production\r\n    config in Grafana's docs.)\r\nremote.kubernetes.configmap \"grafanacloud_otlphttp_configmap\"\r\n    {\r\n  name = \"grafanacloud-otlphttp-configmap\"\r\n}\r\nremote.kubernetes.secret\r\n    \"grafanacloud_otlphttp_secret\" {\r\n  name = \"grafanacloud-otlphttp-secret\"\r\n}\r\n\r\n\/\/\r\n    (The next 2 components are modified from the starter AppOlly production config\r\n    in Grafana's docs.)\r\notelcol.exporter.otlphttp \"grafana_cloud\" {\r\n  \/\/ https:\/\/grafana.com\/docs\/alloy\/latest\/reference\/components\/otelcol.exporter.otlphttp\/\r\n\r\n     client {\r\n    endpoint = remote.kubernetes.configmap.grafanacloud_otlphttp_configmap.data[\"url\"]\r\n\r\n       auth     = otelcol.auth.basic.grafana_cloud.handler\r\n  }\r\n}\r\notelcol.auth.basic\r\n    \"grafana_cloud\" {\r\n  \/\/ https:\/\/grafana.com\/docs\/alloy\/latest\/reference\/components\/otelcol.auth.basic\/\r\n\r\n     username = convert.nonsensitive(remote.kubernetes.configmap.grafanacloud_otlphttp_configmap.data[\"username\"])\r\n\r\n     password = remote.kubernetes.secret.grafanacloud_otlphttp_secret.data[\"password\"]\r\n}\r\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: alloy-config
  namespace: collector
